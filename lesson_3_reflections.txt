When would you want to use a remote repository rather than keeping all your work local?

  A remote repository is useful when you're working with more people, it also works as 
  an external backup in case a disaster happens.
  The third reason to use a remote repository is to make it public so other people can
  use this project (or to boost your ego)

Why might you want to always pull changes manually rather than having Git automatically 
stay up-to-date with your remote repository?

  Maybe that would be OK if every local work is done on branches and no one else works
  on those branches, but that isn't too realistic. The fact is that if there are changes
  that are pulled automatically it can generate a stream of merge conflicts and even
  unexpected changes to the current code base, so we would be wasting lots of time in
  order to get back to a working state.
  
  
Describe the differences between forks, clones, and branches. When would you use one 
instead of another?

	A clone is a full copy of another repository. It's used when you want this code to
	be exactly the same (after synchronization) than the other repository
	A fork is kinda like a clone, but the difference is that you don't have permissions
	to push changes to the source repository, so you create a fork to keep your changes
	on github
	A branch is group of changes that might exist in the local repository, the remote,
	the forked repository...

What is the benefit of having a copy of the last known state of the remote stored
locally?

	You have all the files?
	I don't really know what kind of answer or reflection they want us to provide here.

How would you collaborate without using Git or GitHub? What would be easier, and what 
would be harder?

	Github is just a Git provider, without Github we could use other hosting like
	Gitlab and BitBucket.
	Without Git we would be using other VC system, SVN, HG, ...
	And those without a VC system would be sending back and forth the set of changes
	to the changes and wasting lots of time merging changes.

When would you want to make changes in a separate branch rather than directly in master? 
What benefits does each approach have?

	If there are several people working on the same code base then it's a must to use
	different branches.
	If you're doing some experiment (even on your own), it can be  better to use a branch
	in order to be able to easily go back to the stable version
	Working always on master can be done only if you are the only developer, and you're
	sure that you want to always move forward

